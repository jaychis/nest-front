name: CI

on:
  push:
    branches:
      - stage
      - conf.d
  pull_request:
    branches:
      - stage
      - conf.d

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/nest
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  build-stage:
    if: github.ref == 'refs/heads/stage'
    name: Build Stage
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile-stage
          push: true
          build-args: |
            HTTP_PORT=80
            SERVER_NAME=stage.jaychis.com
          tags: |
            ${{ env.DOCKER_IMAGE }}:stage
            ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}

  build-prod:
    if: github.ref == 'refs/heads/conf.d'
    name: Build Prod
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Create _certs directory
        run: mkdir -p _certs

      - name: Create certificate.crt secret file
        run: echo "${{ secrets.CERTIFICATE_CRT }}" > _certs/certificate.crt

      - name: Create ca_bundle.crt secret file
        run: echo "${{ secrets.CA_BUNDLE_CRT }}" > _certs/ca_bundle.crt

      - name: Create private.key secret file
        run: echo "${{ secrets.PRIVATE_KEY }}" > _certs/private.key

      - name: List _certs directory (debugging step)
        run: ls -la _certs

      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile-conf.d
          push: true
          build-args: |
            CERTIFICATE_CRT=${{ secrets.CERTIFICATE_CRT }}
            CA_BUNDLE_CRT=${{ secrets.CA_BUNDLE_CRT }}
            PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
            HTTP_PORT=80
            HTTPS_PORT=443
            SERVER_NAME=jaychis.com
          tags: |
            ${{ env.DOCKER_IMAGE }}:prod
            ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}

  deploy-stage:
    if: github.ref == 'refs/heads/stage'
    needs: build-stage
    name: Deploy to Stage
    runs-on: [self-hosted, lebel-stage]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Docker run
        run: |
          docker stop nest-front-stage || true
          docker rm nest-front-stage || true
          docker rmi ${{ env.DOCKER_IMAGE }}:stage || true
          docker pull ${{ env.DOCKER_IMAGE }}:stage
          docker run -itd -p 80:80 \
            -e AWSACCESSKEYID="${{ secrets.AWSACCESSKEYID }}" \
            -e AWSSECRETACCESSKEY="${{ secrets.AWSSECRETACCESSKEY }}" \
            -e AWSREGION="${{ secrets.AWSREGION }}" \
            -e S3BUCKETNAME="${{ secrets.S3BUCKETNAME }}" \
            -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
            -e KAKAO_TEST_CLIENT_ID="${{ secrets.KAKAO_TEST_CLIENT_ID }}" \
            -e KAKAO_TEST_CLIENT_SECRET="${{ secrets.KAKAO_TEST_CLIENT_SECRET }}" \
            -e NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}" \
            -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
            --name nest-front-stage --restart always ${{ env.DOCKER_IMAGE }}:stage

  deploy-prod:
    if: github.ref == 'refs/heads/conf.d'
    needs: build-conf.d
    name: Deploy to Production
    runs-on: [self-hosted, label-go]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Docker run
        run: |
          docker stop nest-front || true
          docker rm nest-front || true
          docker rmi ${{ env.DOCKER_IMAGE }}:prod || true
          docker pull ${{ env.DOCKER_IMAGE }}:prod
          docker run -itd -p 443:443 -p 80:80 \
            -e AWSACCESSKEYID="${{ secrets.AWSACCESSKEYID }}" \
            -e AWSSECRETACCESSKEY="${{ secrets.AWSSECRETACCESSKEY }}" \
            -e AWSREGION="${{ secrets.AWSREGION }}" \
            -e S3BUCKETNAME="${{ secrets.S3BUCKETNAME }}" \
            -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
            -e KAKAO_TEST_CLIENT_ID="${{ secrets.KAKAO_TEST_CLIENT_ID }}" \
            -e KAKAO_TEST_CLIENT_SECRET="${{ secrets.KAKAO_TEST_CLIENT_SECRET }}" \
            -e NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}" \
            -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
            --name nest-front --restart always ${{ env.DOCKER_IMAGE }}:prod
